=begin
#Reseplaneraren

#Provides access to VÃ¤sttrafik journey planner

OpenAPI spec version: 1.10.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.28

=end

require 'date'

module SwaggerClient
  class Stop
    # Route index of a stop/station. Can be used as a reference of the stop/station in a journeyDetail response
    attr_accessor :route_idx

    # Arrival date in format YYYY-MM-DD, if available
    attr_accessor :arr_date

    # Departure time in format HH:MM, if available
    attr_accessor :dep_time

    # The WGS84 longitude
    attr_accessor :lon

    # Departure date in format YYYY-MM-DD, if available
    attr_accessor :dep_date

    # Track information, if available
    attr_accessor :track

    # Realtime track information, if available
    attr_accessor :rt_track

    attr_accessor :id

    # Realtime departure time in format HH:MM if available
    attr_accessor :rt_dep_time

    # Realtime arrival time in format HH:MM if available
    attr_accessor :rt_arr_time

    # Contains the name of the stop/station
    attr_accessor :name

    # Arrival time in format HH:MM, if available
    attr_accessor :arr_time

    # The WGS84 latitude
    attr_accessor :lat

    # Realtime departure date in format YYYY-MM-DD, if available
    attr_accessor :rt_dep_date

    # Realtime arrival date in format YYYY-MM-DD, if available
    attr_accessor :rt_arr_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'route_idx' => :'routeIdx',
        :'arr_date' => :'arrDate',
        :'dep_time' => :'depTime',
        :'lon' => :'lon',
        :'dep_date' => :'depDate',
        :'track' => :'track',
        :'rt_track' => :'rtTrack',
        :'id' => :'id',
        :'rt_dep_time' => :'rtDepTime',
        :'rt_arr_time' => :'rtArrTime',
        :'name' => :'name',
        :'arr_time' => :'arrTime',
        :'lat' => :'lat',
        :'rt_dep_date' => :'rtDepDate',
        :'rt_arr_date' => :'rtArrDate'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'route_idx' => :'String',
        :'arr_date' => :'Date',
        :'dep_time' => :'String',
        :'lon' => :'String',
        :'dep_date' => :'Date',
        :'track' => :'String',
        :'rt_track' => :'String',
        :'id' => :'String',
        :'rt_dep_time' => :'String',
        :'rt_arr_time' => :'String',
        :'name' => :'String',
        :'arr_time' => :'String',
        :'lat' => :'String',
        :'rt_dep_date' => :'Date',
        :'rt_arr_date' => :'Date'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'routeIdx')
        self.route_idx = attributes[:'routeIdx']
      end

      if attributes.has_key?(:'arrDate')
        self.arr_date = attributes[:'arrDate']
      end

      if attributes.has_key?(:'depTime')
        self.dep_time = attributes[:'depTime']
      end

      if attributes.has_key?(:'lon')
        self.lon = attributes[:'lon']
      end

      if attributes.has_key?(:'depDate')
        self.dep_date = attributes[:'depDate']
      end

      if attributes.has_key?(:'track')
        self.track = attributes[:'track']
      end

      if attributes.has_key?(:'rtTrack')
        self.rt_track = attributes[:'rtTrack']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'rtDepTime')
        self.rt_dep_time = attributes[:'rtDepTime']
      end

      if attributes.has_key?(:'rtArrTime')
        self.rt_arr_time = attributes[:'rtArrTime']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'arrTime')
        self.arr_time = attributes[:'arrTime']
      end

      if attributes.has_key?(:'lat')
        self.lat = attributes[:'lat']
      end

      if attributes.has_key?(:'rtDepDate')
        self.rt_dep_date = attributes[:'rtDepDate']
      end

      if attributes.has_key?(:'rtArrDate')
        self.rt_arr_date = attributes[:'rtArrDate']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @route_idx.nil?
        invalid_properties.push('invalid value for "route_idx", route_idx cannot be nil.')
      end

      if @lon.nil?
        invalid_properties.push('invalid value for "lon", lon cannot be nil.')
      end

      if @track.nil?
        invalid_properties.push('invalid value for "track", track cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @lat.nil?
        invalid_properties.push('invalid value for "lat", lat cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @route_idx.nil?
      return false if @lon.nil?
      return false if @track.nil?
      return false if @id.nil?
      return false if @name.nil?
      return false if @lat.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          route_idx == o.route_idx &&
          arr_date == o.arr_date &&
          dep_time == o.dep_time &&
          lon == o.lon &&
          dep_date == o.dep_date &&
          track == o.track &&
          rt_track == o.rt_track &&
          id == o.id &&
          rt_dep_time == o.rt_dep_time &&
          rt_arr_time == o.rt_arr_time &&
          name == o.name &&
          arr_time == o.arr_time &&
          lat == o.lat &&
          rt_dep_date == o.rt_dep_date &&
          rt_arr_date == o.rt_arr_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [route_idx, arr_date, dep_time, lon, dep_date, track, rt_track, id, rt_dep_time, rt_arr_time, name, arr_time, lat, rt_dep_date, rt_arr_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
