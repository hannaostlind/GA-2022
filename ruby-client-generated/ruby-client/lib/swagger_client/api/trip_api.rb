=begin
#Reseplaneraren

#Provides access to Västtrafik journey planner

OpenAPI spec version: 1.10.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.28

=end

require 'uri'

module SwaggerClient
  class TripApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Calculates a trip from a specified origin to a specified destination.
    # Calculates a trip from a specified origin to a specified destination. These might be stop/station IDs or coordinates based on addresses and points of interest validated by the location service or coordinates freely defined by the client. Parameters specifying both origin and destination are mandatory in calls to the trip service. When specifying a stop as origin, the parameter originId is used, while originCoordLat, originCoordLong, and originCoordName are used to specify a (named) coordinate. For the destination, the corresponding parameters are named either destId or destCoordLat, destCoordLong and destCoordName. It is also possible to define a via-stop/station. This forces the journey planner to search for trips which pass the defined station. The parameter is called viaId. When searching for a trip that goes via a coordinate, rather than a stop, two separate trip requests need to be combined into one.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :origin_id origin stop id
    # @option opts [Float] :origin_coord_lat origin latitude of center coordinate in the WGS84 system
    # @option opts [Float] :origin_coord_long origin longitude of center coordinate in the WGS84 system
    # @option opts [String] :origin_coord_name name of the address at the specified origin coordinate
    # @option opts [Integer] :dest_id destination stop id
    # @option opts [Float] :dest_coord_lat destination latitude of center coordinate in the WGS84 system
    # @option opts [Float] :dest_coord_long destination longitude of center coordinate in the WGS84 system
    # @option opts [String] :dest_coord_name name of the address at the specified destination coordinate
    # @option opts [Integer] :via_id via stop/station id
    # @option opts [Date] :date date of the trip
    # @option opts [String] :time time of the trip in format HH:MM
    # @option opts [String] :search_for_arrival to specify that the given time and date is not the departure time but the latest time to arrive at the destination, set this parameter to the value 1.
    # @option opts [String] :use_vas to exclude trips with Västtågen, set this parameter to 0.
    # @option opts [String] :use_ld_train to exclude trips with long distance trains, set this parameter to 0.
    # @option opts [String] :use_reg_train to exclude trips with regional trains, set this parameter to 0.
    # @option opts [String] :use_bus to exclude trips with buses, set this parameter to 0.
    # @option opts [String] :use_medical to include medical transport lines trips with buses, set this parameter to 1.
    # @option opts [String] :origin_medical_con to search for medical transport connections from the origin, set this parameter to 1.
    # @option opts [String] :dest_medical_con to search for medical transport connections from the destination, set this parameter to 1.
    # @option opts [String] :wheel_chair_space to search for trips where at least one wheelchair space is present in the vehicle, set this parameter to 1.
    # @option opts [String] :stroller_space to search for trips with space for stroller, baby carriage or rollator in the vehicle, set this parameter to 1.
    # @option opts [String] :low_floor to search for trips where the vehicle is equipped with a low floor section, but not necessarily a ramp or lift, set this parameter to 1.
    # @option opts [String] :ramp_or_lift to search for trips where the vehicle is equipped with ramp or lift that allows fully barrier-free boarding and alighting, set this parameter to 1.
    # @option opts [String] :use_boat to exclude trips with boats, set this parameter to 0.
    # @option opts [String] :use_tram to exclude trips with trams, set this parameter to 0.
    # @option opts [String] :use_pt to exclude trips with public transportation, set this parameter to 0.
    # @option opts [String] :exclude_dr to exclude journeys which require tel. registration, set this parameter to 1.
    # @option opts [Integer] :max_walk_dist maximum walking distance from/to the coordinate in meters
    # @option opts [String] :walk_speed walking speed given in percent of normal speed
    # @option opts [String] :origin_walk to exclude trips with walks from/to coordinates, set this to 0
    # @option opts [String] :dest_walk to exclude trips with walks from/to coordinates, set this to 0
    # @option opts [String] :only_walk to search for walk-only trips, set this to 1
    # @option opts [String] :origin_bike to search for trips with a bike ride from the origin to a nearby stop, where the journey continues using public transport, set this to 1.
    # @option opts [Integer] :max_bike_dist maximum biking distance from/to the coordinate in meters
    # @option opts [String] :bike_criterion optimize for either the fastest route or a route that is made up of a larger percentage of bike road, where &#39;F&#39; is used to indicate tha fastest route with mimimized travel time, and &#39;D&#39; is used to indicate dedicated bike roads to maximize use of bike roads.
    # @option opts [String] :bike_profile determines the altitude profile of the route, based on a setting for how fast the user can bike when it is steep, where &#39;E&#39; is used to indicate easy with minimized steepnes, &#39;N&#39; is used to indicate normal, and &#39;P&#39; is used to indicate powerful to allow more steepness.
    # @option opts [String] :only_bike to search for bike-only trips, set this to 1
    # @option opts [String] :origin_car to search for trips where customer travels by car from the origin and is dropped off at a stop to continue the trip using public transport, set this to 1.
    # @option opts [String] :origin_car_with_parking to search for trips where the customer travels by car from the origin, parks at a commuter parking and walks to a nearby stop to continue the trip using public transport, set this to 1.
    # @option opts [Integer] :max_car_dist maximum car distance from/to the coordinate in meters
    # @option opts [String] :only_car to search for car-only trips, set this to 1
    # @option opts [Integer] :max_changes maximum number of changes in the trip
    # @option opts [Integer] :additional_change_time to prolong the minimal change times in minutes between the public transport legs of the returned journeys
    # @option opts [String] :disregard_default_change_margin to ignore the default change margin, set this to 1
    # @option opts [String] :need_journey_detail if the reference URL for the journey detail service is not needed in the re, set this to 0
    # @option opts [String] :need_geo if a reference link for each leg of the resulting trips, which can be used to request the geometry, is needed, set this to 1
    # @option opts [String] :need_itinerary if a reference link for each leg of the resulting trips, which can be used to request the itinerary, is needed, set this to 1
    # @option opts [Integer] :num_trips the number of trips in the returned result
    # @option opts [String] :format the required response format
    # @option opts [String] :jsonp_callback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
    # @return [TripList]
    def get_trip(opts = {})
      data, _status_code, _headers = get_trip_with_http_info(opts)
      data
    end

    # Calculates a trip from a specified origin to a specified destination.
    # Calculates a trip from a specified origin to a specified destination. These might be stop/station IDs or coordinates based on addresses and points of interest validated by the location service or coordinates freely defined by the client. Parameters specifying both origin and destination are mandatory in calls to the trip service. When specifying a stop as origin, the parameter originId is used, while originCoordLat, originCoordLong, and originCoordName are used to specify a (named) coordinate. For the destination, the corresponding parameters are named either destId or destCoordLat, destCoordLong and destCoordName. It is also possible to define a via-stop/station. This forces the journey planner to search for trips which pass the defined station. The parameter is called viaId. When searching for a trip that goes via a coordinate, rather than a stop, two separate trip requests need to be combined into one.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :origin_id origin stop id
    # @option opts [Float] :origin_coord_lat origin latitude of center coordinate in the WGS84 system
    # @option opts [Float] :origin_coord_long origin longitude of center coordinate in the WGS84 system
    # @option opts [String] :origin_coord_name name of the address at the specified origin coordinate
    # @option opts [Integer] :dest_id destination stop id
    # @option opts [Float] :dest_coord_lat destination latitude of center coordinate in the WGS84 system
    # @option opts [Float] :dest_coord_long destination longitude of center coordinate in the WGS84 system
    # @option opts [String] :dest_coord_name name of the address at the specified destination coordinate
    # @option opts [Integer] :via_id via stop/station id
    # @option opts [Date] :date date of the trip
    # @option opts [String] :time time of the trip in format HH:MM
    # @option opts [String] :search_for_arrival to specify that the given time and date is not the departure time but the latest time to arrive at the destination, set this parameter to the value 1.
    # @option opts [String] :use_vas to exclude trips with Västtågen, set this parameter to 0.
    # @option opts [String] :use_ld_train to exclude trips with long distance trains, set this parameter to 0.
    # @option opts [String] :use_reg_train to exclude trips with regional trains, set this parameter to 0.
    # @option opts [String] :use_bus to exclude trips with buses, set this parameter to 0.
    # @option opts [String] :use_medical to include medical transport lines trips with buses, set this parameter to 1.
    # @option opts [String] :origin_medical_con to search for medical transport connections from the origin, set this parameter to 1.
    # @option opts [String] :dest_medical_con to search for medical transport connections from the destination, set this parameter to 1.
    # @option opts [String] :wheel_chair_space to search for trips where at least one wheelchair space is present in the vehicle, set this parameter to 1.
    # @option opts [String] :stroller_space to search for trips with space for stroller, baby carriage or rollator in the vehicle, set this parameter to 1.
    # @option opts [String] :low_floor to search for trips where the vehicle is equipped with a low floor section, but not necessarily a ramp or lift, set this parameter to 1.
    # @option opts [String] :ramp_or_lift to search for trips where the vehicle is equipped with ramp or lift that allows fully barrier-free boarding and alighting, set this parameter to 1.
    # @option opts [String] :use_boat to exclude trips with boats, set this parameter to 0.
    # @option opts [String] :use_tram to exclude trips with trams, set this parameter to 0.
    # @option opts [String] :use_pt to exclude trips with public transportation, set this parameter to 0.
    # @option opts [String] :exclude_dr to exclude journeys which require tel. registration, set this parameter to 1.
    # @option opts [Integer] :max_walk_dist maximum walking distance from/to the coordinate in meters
    # @option opts [String] :walk_speed walking speed given in percent of normal speed
    # @option opts [String] :origin_walk to exclude trips with walks from/to coordinates, set this to 0
    # @option opts [String] :dest_walk to exclude trips with walks from/to coordinates, set this to 0
    # @option opts [String] :only_walk to search for walk-only trips, set this to 1
    # @option opts [String] :origin_bike to search for trips with a bike ride from the origin to a nearby stop, where the journey continues using public transport, set this to 1.
    # @option opts [Integer] :max_bike_dist maximum biking distance from/to the coordinate in meters
    # @option opts [String] :bike_criterion optimize for either the fastest route or a route that is made up of a larger percentage of bike road, where &#39;F&#39; is used to indicate tha fastest route with mimimized travel time, and &#39;D&#39; is used to indicate dedicated bike roads to maximize use of bike roads.
    # @option opts [String] :bike_profile determines the altitude profile of the route, based on a setting for how fast the user can bike when it is steep, where &#39;E&#39; is used to indicate easy with minimized steepnes, &#39;N&#39; is used to indicate normal, and &#39;P&#39; is used to indicate powerful to allow more steepness.
    # @option opts [String] :only_bike to search for bike-only trips, set this to 1
    # @option opts [String] :origin_car to search for trips where customer travels by car from the origin and is dropped off at a stop to continue the trip using public transport, set this to 1.
    # @option opts [String] :origin_car_with_parking to search for trips where the customer travels by car from the origin, parks at a commuter parking and walks to a nearby stop to continue the trip using public transport, set this to 1.
    # @option opts [Integer] :max_car_dist maximum car distance from/to the coordinate in meters
    # @option opts [String] :only_car to search for car-only trips, set this to 1
    # @option opts [Integer] :max_changes maximum number of changes in the trip
    # @option opts [Integer] :additional_change_time to prolong the minimal change times in minutes between the public transport legs of the returned journeys
    # @option opts [String] :disregard_default_change_margin to ignore the default change margin, set this to 1
    # @option opts [String] :need_journey_detail if the reference URL for the journey detail service is not needed in the re, set this to 0
    # @option opts [String] :need_geo if a reference link for each leg of the resulting trips, which can be used to request the geometry, is needed, set this to 1
    # @option opts [String] :need_itinerary if a reference link for each leg of the resulting trips, which can be used to request the itinerary, is needed, set this to 1
    # @option opts [Integer] :num_trips the number of trips in the returned result
    # @option opts [String] :format the required response format
    # @option opts [String] :jsonp_callback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
    # @return [Array<(TripList, Fixnum, Hash)>] TripList data, response status code and response headers
    def get_trip_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TripApi.get_trip ...'
      end
      # resource path
      local_var_path = '/trip'

      # query parameters
      query_params = {}
      query_params[:'originId'] = opts[:'origin_id'] if !opts[:'origin_id'].nil?
      query_params[:'originCoordLat'] = opts[:'origin_coord_lat'] if !opts[:'origin_coord_lat'].nil?
      query_params[:'originCoordLong'] = opts[:'origin_coord_long'] if !opts[:'origin_coord_long'].nil?
      query_params[:'originCoordName'] = opts[:'origin_coord_name'] if !opts[:'origin_coord_name'].nil?
      query_params[:'destId'] = opts[:'dest_id'] if !opts[:'dest_id'].nil?
      query_params[:'destCoordLat'] = opts[:'dest_coord_lat'] if !opts[:'dest_coord_lat'].nil?
      query_params[:'destCoordLong'] = opts[:'dest_coord_long'] if !opts[:'dest_coord_long'].nil?
      query_params[:'destCoordName'] = opts[:'dest_coord_name'] if !opts[:'dest_coord_name'].nil?
      query_params[:'viaId'] = opts[:'via_id'] if !opts[:'via_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'time'] = opts[:'time'] if !opts[:'time'].nil?
      query_params[:'searchForArrival'] = opts[:'search_for_arrival'] if !opts[:'search_for_arrival'].nil?
      query_params[:'useVas'] = opts[:'use_vas'] if !opts[:'use_vas'].nil?
      query_params[:'useLDTrain'] = opts[:'use_ld_train'] if !opts[:'use_ld_train'].nil?
      query_params[:'useRegTrain'] = opts[:'use_reg_train'] if !opts[:'use_reg_train'].nil?
      query_params[:'useBus'] = opts[:'use_bus'] if !opts[:'use_bus'].nil?
      query_params[:'useMedical'] = opts[:'use_medical'] if !opts[:'use_medical'].nil?
      query_params[:'originMedicalCon'] = opts[:'origin_medical_con'] if !opts[:'origin_medical_con'].nil?
      query_params[:'destMedicalCon'] = opts[:'dest_medical_con'] if !opts[:'dest_medical_con'].nil?
      query_params[:'wheelChairSpace'] = opts[:'wheel_chair_space'] if !opts[:'wheel_chair_space'].nil?
      query_params[:'strollerSpace'] = opts[:'stroller_space'] if !opts[:'stroller_space'].nil?
      query_params[:'lowFloor'] = opts[:'low_floor'] if !opts[:'low_floor'].nil?
      query_params[:'rampOrLift'] = opts[:'ramp_or_lift'] if !opts[:'ramp_or_lift'].nil?
      query_params[:'useBoat'] = opts[:'use_boat'] if !opts[:'use_boat'].nil?
      query_params[:'useTram'] = opts[:'use_tram'] if !opts[:'use_tram'].nil?
      query_params[:'usePT'] = opts[:'use_pt'] if !opts[:'use_pt'].nil?
      query_params[:'excludeDR'] = opts[:'exclude_dr'] if !opts[:'exclude_dr'].nil?
      query_params[:'maxWalkDist'] = opts[:'max_walk_dist'] if !opts[:'max_walk_dist'].nil?
      query_params[:'walkSpeed'] = opts[:'walk_speed'] if !opts[:'walk_speed'].nil?
      query_params[:'originWalk'] = opts[:'origin_walk'] if !opts[:'origin_walk'].nil?
      query_params[:'destWalk'] = opts[:'dest_walk'] if !opts[:'dest_walk'].nil?
      query_params[:'onlyWalk'] = opts[:'only_walk'] if !opts[:'only_walk'].nil?
      query_params[:'originBike'] = opts[:'origin_bike'] if !opts[:'origin_bike'].nil?
      query_params[:'maxBikeDist'] = opts[:'max_bike_dist'] if !opts[:'max_bike_dist'].nil?
      query_params[:'bikeCriterion'] = opts[:'bike_criterion'] if !opts[:'bike_criterion'].nil?
      query_params[:'bikeProfile'] = opts[:'bike_profile'] if !opts[:'bike_profile'].nil?
      query_params[:'onlyBike'] = opts[:'only_bike'] if !opts[:'only_bike'].nil?
      query_params[:'originCar'] = opts[:'origin_car'] if !opts[:'origin_car'].nil?
      query_params[:'originCarWithParking'] = opts[:'origin_car_with_parking'] if !opts[:'origin_car_with_parking'].nil?
      query_params[:'maxCarDist'] = opts[:'max_car_dist'] if !opts[:'max_car_dist'].nil?
      query_params[:'onlyCar'] = opts[:'only_car'] if !opts[:'only_car'].nil?
      query_params[:'maxChanges'] = opts[:'max_changes'] if !opts[:'max_changes'].nil?
      query_params[:'additionalChangeTime'] = opts[:'additional_change_time'] if !opts[:'additional_change_time'].nil?
      query_params[:'disregardDefaultChangeMargin'] = opts[:'disregard_default_change_margin'] if !opts[:'disregard_default_change_margin'].nil?
      query_params[:'needJourneyDetail'] = opts[:'need_journey_detail'] if !opts[:'need_journey_detail'].nil?
      query_params[:'needGeo'] = opts[:'need_geo'] if !opts[:'need_geo'].nil?
      query_params[:'needItinerary'] = opts[:'need_itinerary'] if !opts[:'need_itinerary'].nil?
      query_params[:'numTrips'] = opts[:'num_trips'] if !opts[:'num_trips'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'jsonpCallback'] = opts[:'jsonp_callback'] if !opts[:'jsonp_callback'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TripList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TripApi#get_trip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
