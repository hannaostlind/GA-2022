=begin
#Reseplaneraren

#Provides access to VÃ¤sttrafik journey planner

OpenAPI spec version: 1.10.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.28

=end

require 'uri'

module SwaggerClient
  class LocationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a list of all stops available in the journey planner.
    # Returns a list of all stops available in the journey planner. Be aware that a call of this service is very time consuming and should be only requested when it is really needed.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format the required response format
    # @option opts [String] :jsonp_callback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
    # @return [LocationList]
    def get_all_stops(opts = {})
      data, _status_code, _headers = get_all_stops_with_http_info(opts)
      data
    end

    # Returns a list of all stops available in the journey planner.
    # Returns a list of all stops available in the journey planner. Be aware that a call of this service is very time consuming and should be only requested when it is really needed.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format the required response format
    # @option opts [String] :jsonp_callback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
    # @return [Array<(LocationList, Fixnum, Hash)>] LocationList data, response status code and response headers
    def get_all_stops_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocationApi.get_all_stops ...'
      end
      # resource path
      local_var_path = '/location.allstops'

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'jsonpCallback'] = opts[:'jsonp_callback'] if !opts[:'jsonp_callback'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LocationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocationApi#get_all_stops\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of possible matches in the journey planner database
    # Performs a pattern matching of a user input to retrieve a list of possible matches in the journey planner database. Possible matches might be stops/stations, points of interest and addresses.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :input a string with the user input
    # @option opts [String] :format the required response format
    # @option opts [String] :jsonp_callback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
    # @return [LocationList]
    def get_location_by_name(opts = {})
      data, _status_code, _headers = get_location_by_name_with_http_info(opts)
      data
    end

    # Returns a list of possible matches in the journey planner database
    # Performs a pattern matching of a user input to retrieve a list of possible matches in the journey planner database. Possible matches might be stops/stations, points of interest and addresses.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :input a string with the user input
    # @option opts [String] :format the required response format
    # @option opts [String] :jsonp_callback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
    # @return [Array<(LocationList, Fixnum, Hash)>] LocationList data, response status code and response headers
    def get_location_by_name_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocationApi.get_location_by_name ...'
      end
      # resource path
      local_var_path = '/location.name'

      # query parameters
      query_params = {}
      query_params[:'input'] = opts[:'input'] if !opts[:'input'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'jsonpCallback'] = opts[:'jsonp_callback'] if !opts[:'jsonp_callback'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LocationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocationApi#get_location_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the address nearest a given coordinate.
    # 
    # @param origin_coord_lat latitude of coordinate in the WGS84 system
    # @param origin_coord_long longitude of coordinate in the WGS84 system
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format the required response format
    # @option opts [String] :jsonp_callback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
    # @return [LocationList]
    def get_nearby_address(origin_coord_lat, origin_coord_long, opts = {})
      data, _status_code, _headers = get_nearby_address_with_http_info(origin_coord_lat, origin_coord_long, opts)
      data
    end

    # Returns the address nearest a given coordinate.
    # 
    # @param origin_coord_lat latitude of coordinate in the WGS84 system
    # @param origin_coord_long longitude of coordinate in the WGS84 system
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format the required response format
    # @option opts [String] :jsonp_callback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
    # @return [Array<(LocationList, Fixnum, Hash)>] LocationList data, response status code and response headers
    def get_nearby_address_with_http_info(origin_coord_lat, origin_coord_long, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocationApi.get_nearby_address ...'
      end
      # verify the required parameter 'origin_coord_lat' is set
      if @api_client.config.client_side_validation && origin_coord_lat.nil?
        fail ArgumentError, "Missing the required parameter 'origin_coord_lat' when calling LocationApi.get_nearby_address"
      end
      # verify the required parameter 'origin_coord_long' is set
      if @api_client.config.client_side_validation && origin_coord_long.nil?
        fail ArgumentError, "Missing the required parameter 'origin_coord_long' when calling LocationApi.get_nearby_address"
      end
      # resource path
      local_var_path = '/location.nearbyaddress'

      # query parameters
      query_params = {}
      query_params[:'originCoordLat'] = origin_coord_lat
      query_params[:'originCoordLong'] = origin_coord_long
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'jsonpCallback'] = opts[:'jsonp_callback'] if !opts[:'jsonp_callback'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LocationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocationApi#get_nearby_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of stops around a given center coordinate.
    # Returns a list of stops around a given center coordinate. The returned results are ordered by their distance to the center coordinate.
    # @param origin_coord_lat latitude of center coordinate in the WGS84 system
    # @param origin_coord_long longitude of center coordinate in the WGS84 system
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_no maximum number of returned stops
    # @option opts [Integer] :max_dist maximum distance from the center coordinate
    # @option opts [String] :format the required response format
    # @option opts [String] :jsonp_callback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
    # @return [LocationList]
    def get_nearby_stops(origin_coord_lat, origin_coord_long, opts = {})
      data, _status_code, _headers = get_nearby_stops_with_http_info(origin_coord_lat, origin_coord_long, opts)
      data
    end

    # Returns a list of stops around a given center coordinate.
    # Returns a list of stops around a given center coordinate. The returned results are ordered by their distance to the center coordinate.
    # @param origin_coord_lat latitude of center coordinate in the WGS84 system
    # @param origin_coord_long longitude of center coordinate in the WGS84 system
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_no maximum number of returned stops
    # @option opts [Integer] :max_dist maximum distance from the center coordinate
    # @option opts [String] :format the required response format
    # @option opts [String] :jsonp_callback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
    # @return [Array<(LocationList, Fixnum, Hash)>] LocationList data, response status code and response headers
    def get_nearby_stops_with_http_info(origin_coord_lat, origin_coord_long, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocationApi.get_nearby_stops ...'
      end
      # verify the required parameter 'origin_coord_lat' is set
      if @api_client.config.client_side_validation && origin_coord_lat.nil?
        fail ArgumentError, "Missing the required parameter 'origin_coord_lat' when calling LocationApi.get_nearby_stops"
      end
      # verify the required parameter 'origin_coord_long' is set
      if @api_client.config.client_side_validation && origin_coord_long.nil?
        fail ArgumentError, "Missing the required parameter 'origin_coord_long' when calling LocationApi.get_nearby_stops"
      end
      # resource path
      local_var_path = '/location.nearbystops'

      # query parameters
      query_params = {}
      query_params[:'originCoordLat'] = origin_coord_lat
      query_params[:'originCoordLong'] = origin_coord_long
      query_params[:'maxNo'] = opts[:'max_no'] if !opts[:'max_no'].nil?
      query_params[:'maxDist'] = opts[:'max_dist'] if !opts[:'max_dist'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'jsonpCallback'] = opts[:'jsonp_callback'] if !opts[:'jsonp_callback'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LocationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocationApi#get_nearby_stops\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
