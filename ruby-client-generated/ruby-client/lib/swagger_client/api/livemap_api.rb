=begin
#Reseplaneraren

#Provides access to VÃ¤sttrafik journey planner

OpenAPI spec version: 1.10.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.28

=end

require 'uri'

module SwaggerClient
  class LivemapApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns the positions of all vehicles in a given bounding box
    # This method will return the positions of all vehicles in a given bounding box.
    # @param minx Left border (longitude) of the bounding box in WGS84 * 1000000
    # @param maxx Right border (longitude) of the bounding box in WGS84 * 1000000
    # @param miny Lower border (latitude) of the bounding box in WGS84 * 1000000
    # @param maxy Upper border (latitude) of the bounding box in WGS84 * 1000000
    # @param only_realtime Can be used to define whether all vehicles should be returned or only those  vehicles which have realtime information. If it is set to yes, only vehicles  with realtime information are returned, if it is set to no, all vehicles in the  bounding box are returned.
    # @param [Hash] opts the optional parameters
    # @return [LiveMap]
    def livemap(minx, maxx, miny, maxy, only_realtime, opts = {})
      data, _status_code, _headers = livemap_with_http_info(minx, maxx, miny, maxy, only_realtime, opts)
      data
    end

    # Returns the positions of all vehicles in a given bounding box
    # This method will return the positions of all vehicles in a given bounding box.
    # @param minx Left border (longitude) of the bounding box in WGS84 * 1000000
    # @param maxx Right border (longitude) of the bounding box in WGS84 * 1000000
    # @param miny Lower border (latitude) of the bounding box in WGS84 * 1000000
    # @param maxy Upper border (latitude) of the bounding box in WGS84 * 1000000
    # @param only_realtime Can be used to define whether all vehicles should be returned or only those  vehicles which have realtime information. If it is set to yes, only vehicles  with realtime information are returned, if it is set to no, all vehicles in the  bounding box are returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(LiveMap, Fixnum, Hash)>] LiveMap data, response status code and response headers
    def livemap_with_http_info(minx, maxx, miny, maxy, only_realtime, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LivemapApi.livemap ...'
      end
      # verify the required parameter 'minx' is set
      if @api_client.config.client_side_validation && minx.nil?
        fail ArgumentError, "Missing the required parameter 'minx' when calling LivemapApi.livemap"
      end
      # verify the required parameter 'maxx' is set
      if @api_client.config.client_side_validation && maxx.nil?
        fail ArgumentError, "Missing the required parameter 'maxx' when calling LivemapApi.livemap"
      end
      # verify the required parameter 'miny' is set
      if @api_client.config.client_side_validation && miny.nil?
        fail ArgumentError, "Missing the required parameter 'miny' when calling LivemapApi.livemap"
      end
      # verify the required parameter 'maxy' is set
      if @api_client.config.client_side_validation && maxy.nil?
        fail ArgumentError, "Missing the required parameter 'maxy' when calling LivemapApi.livemap"
      end
      # verify the required parameter 'only_realtime' is set
      if @api_client.config.client_side_validation && only_realtime.nil?
        fail ArgumentError, "Missing the required parameter 'only_realtime' when calling LivemapApi.livemap"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['yes', 'no'].include?(only_realtime)
        fail ArgumentError, "invalid value for 'only_realtime', must be one of yes, no"
      end
      # resource path
      local_var_path = '/livemap'

      # query parameters
      query_params = {}
      query_params[:'minx'] = minx
      query_params[:'maxx'] = maxx
      query_params[:'miny'] = miny
      query_params[:'maxy'] = maxy
      query_params[:'onlyRealtime'] = only_realtime

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LivemapApi#livemap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
