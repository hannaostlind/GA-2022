=begin
#Reseplaneraren

#Provides access to Västtrafik journey planner

OpenAPI spec version: 1.10.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.28

=end

require 'uri'

module SwaggerClient
  class ArrivalBoardApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Return the next 20 arrivals (or less if not existing) from a given point in time or the next arrivals in a given timespan.
    # This method will return the next 20 arrivals (or less if not existing) from a given point in time or the next arrivals in a given timespan. The service can only be called for stops/stations by using according ID retrieved by the location method. The parameter is called id. The time and date are defined with the parameters date and time.
    # @param id stop id
    # @param date the date
    # @param time the time in format HH:MM
    # @param direction stop id in order to get only departures of vehicles with a specified direction
    # @param [Hash] opts the optional parameters
    # @option opts [String] :use_vas to exclude trips with Västtågen, set this parameter to 0.
    # @option opts [String] :use_ld_train to exclude trips with long distance trains, set this parameter to 0.
    # @option opts [String] :use_reg_train to exclude trips with regional trains, set this parameter to 0.
    # @option opts [String] :use_bus to exclude trips with buses, set this parameter to 0.
    # @option opts [String] :use_boat to exclude trips with boats, set this parameter to 0.
    # @option opts [String] :use_tram to exclude trips with trams, set this parameter to 0.
    # @option opts [String] :exclude_dr to exclude journeys which require tel. registration, set this parameter to 0.
    # @option opts [Integer] :time_span to get the next departures in a specified timespan of up to 24 hours (unit: minutes). If this parameter is not set, the result will contain the next 20 departures.
    # @option opts [Integer] :max_departures_per_line if timeSpan is set you can further reduce the number of returned journeys by adding this parameter, which will cause only the given number of journeys for every combination of line and direction.
    # @option opts [String] :need_journey_detail if the reference URL for the journey detail service is not needed in the result, set this parameter to 0
    # @option opts [String] :format the required response format
    # @option opts [String] :jsonp_callback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
    # @return [ArrivalBoard]
    def get_arrival_board(id, date, time, direction, opts = {})
      data, _status_code, _headers = get_arrival_board_with_http_info(id, date, time, direction, opts)
      data
    end

    # Return the next 20 arrivals (or less if not existing) from a given point in time or the next arrivals in a given timespan.
    # This method will return the next 20 arrivals (or less if not existing) from a given point in time or the next arrivals in a given timespan. The service can only be called for stops/stations by using according ID retrieved by the location method. The parameter is called id. The time and date are defined with the parameters date and time.
    # @param id stop id
    # @param date the date
    # @param time the time in format HH:MM
    # @param direction stop id in order to get only departures of vehicles with a specified direction
    # @param [Hash] opts the optional parameters
    # @option opts [String] :use_vas to exclude trips with Västtågen, set this parameter to 0.
    # @option opts [String] :use_ld_train to exclude trips with long distance trains, set this parameter to 0.
    # @option opts [String] :use_reg_train to exclude trips with regional trains, set this parameter to 0.
    # @option opts [String] :use_bus to exclude trips with buses, set this parameter to 0.
    # @option opts [String] :use_boat to exclude trips with boats, set this parameter to 0.
    # @option opts [String] :use_tram to exclude trips with trams, set this parameter to 0.
    # @option opts [String] :exclude_dr to exclude journeys which require tel. registration, set this parameter to 0.
    # @option opts [Integer] :time_span to get the next departures in a specified timespan of up to 24 hours (unit: minutes). If this parameter is not set, the result will contain the next 20 departures.
    # @option opts [Integer] :max_departures_per_line if timeSpan is set you can further reduce the number of returned journeys by adding this parameter, which will cause only the given number of journeys for every combination of line and direction.
    # @option opts [String] :need_journey_detail if the reference URL for the journey detail service is not needed in the result, set this parameter to 0
    # @option opts [String] :format the required response format
    # @option opts [String] :jsonp_callback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.
    # @return [Array<(ArrivalBoard, Fixnum, Hash)>] ArrivalBoard data, response status code and response headers
    def get_arrival_board_with_http_info(id, date, time, direction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArrivalBoardApi.get_arrival_board ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ArrivalBoardApi.get_arrival_board"
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling ArrivalBoardApi.get_arrival_board"
      end
      # verify the required parameter 'time' is set
      if @api_client.config.client_side_validation && time.nil?
        fail ArgumentError, "Missing the required parameter 'time' when calling ArrivalBoardApi.get_arrival_board"
      end
      # verify the required parameter 'direction' is set
      if @api_client.config.client_side_validation && direction.nil?
        fail ArgumentError, "Missing the required parameter 'direction' when calling ArrivalBoardApi.get_arrival_board"
      end
      # resource path
      local_var_path = '/arrivalBoard'

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'date'] = date
      query_params[:'time'] = time
      query_params[:'direction'] = direction
      query_params[:'useVas'] = opts[:'use_vas'] if !opts[:'use_vas'].nil?
      query_params[:'useLDTrain'] = opts[:'use_ld_train'] if !opts[:'use_ld_train'].nil?
      query_params[:'useRegTrain'] = opts[:'use_reg_train'] if !opts[:'use_reg_train'].nil?
      query_params[:'useBus'] = opts[:'use_bus'] if !opts[:'use_bus'].nil?
      query_params[:'useBoat'] = opts[:'use_boat'] if !opts[:'use_boat'].nil?
      query_params[:'useTram'] = opts[:'use_tram'] if !opts[:'use_tram'].nil?
      query_params[:'excludeDR'] = opts[:'exclude_dr'] if !opts[:'exclude_dr'].nil?
      query_params[:'timeSpan'] = opts[:'time_span'] if !opts[:'time_span'].nil?
      query_params[:'maxDeparturesPerLine'] = opts[:'max_departures_per_line'] if !opts[:'max_departures_per_line'].nil?
      query_params[:'needJourneyDetail'] = opts[:'need_journey_detail'] if !opts[:'need_journey_detail'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'jsonpCallback'] = opts[:'jsonp_callback'] if !opts[:'jsonp_callback'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ArrivalBoard')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArrivalBoardApi#get_arrival_board\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
