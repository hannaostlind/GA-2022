=begin
#Reseplaneraren

#Provides access to VÃ¤sttrafik journey planner

OpenAPI spec version: 1.10.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.28

=end

require 'date'

module SwaggerClient
  class Arrival
    # Foregroundcolor of this line
    attr_accessor :fg_color

    # Contains the name of the stop/station
    attr_accessor :stop

    # Will be true if this journey needs to be booked
    attr_accessor :booking

    attr_accessor :journey_detail_ref

    # Origin of the journey
    attr_accessor :origin

    # Track information, if available
    attr_accessor :track

    # Realtime track information, if available
    attr_accessor :rt_track

    # Short name of the leg
    attr_accessor :sname

    # The attribute type specifies the type of the arriving journey. Valid values are VAS, LDT (Long Distance Train), REG (Regional train), BUS , BOAT, TRAM, TAXI (Taxi/Telebus)
    attr_accessor :type

    # Date in format YYYY-MM-DD
    attr_accessor :date

    # Backgroundcolor of this line
    attr_accessor :bg_color

    # Stroke style of this line
    attr_accessor :stroke

    # Realtime date in format YYYY-MM-DD, if available
    attr_accessor :rt_date

    # Time in format HH:MM
    attr_accessor :time

    # The attribute name specifies the name of the arriving journey
    attr_accessor :name

    # Realtime time in format HH:MM if available
    attr_accessor :rt_time

    # Will be true if this journey is a night journey
    attr_accessor :night

    # Contains the id of the stop/station
    attr_accessor :stopid

    # Contains the id of the journey
    attr_accessor :journeyid

    # will only be set if the vehicle has wheelchair + ramp/lift or lowfloor according to realtime data
    attr_accessor :accessibility

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'fg_color' => :'fgColor',
        :'stop' => :'stop',
        :'booking' => :'booking',
        :'journey_detail_ref' => :'JourneyDetailRef',
        :'origin' => :'origin',
        :'track' => :'track',
        :'rt_track' => :'rtTrack',
        :'sname' => :'sname',
        :'type' => :'type',
        :'date' => :'date',
        :'bg_color' => :'bgColor',
        :'stroke' => :'stroke',
        :'rt_date' => :'rtDate',
        :'time' => :'time',
        :'name' => :'name',
        :'rt_time' => :'rtTime',
        :'night' => :'night',
        :'stopid' => :'stopid',
        :'journeyid' => :'journeyid',
        :'accessibility' => :'accessibility'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'fg_color' => :'String',
        :'stop' => :'String',
        :'booking' => :'BOOLEAN',
        :'journey_detail_ref' => :'JourneyDetailRef',
        :'origin' => :'String',
        :'track' => :'String',
        :'rt_track' => :'String',
        :'sname' => :'String',
        :'type' => :'String',
        :'date' => :'Date',
        :'bg_color' => :'String',
        :'stroke' => :'String',
        :'rt_date' => :'Date',
        :'time' => :'String',
        :'name' => :'String',
        :'rt_time' => :'String',
        :'night' => :'BOOLEAN',
        :'stopid' => :'String',
        :'journeyid' => :'String',
        :'accessibility' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'fgColor')
        self.fg_color = attributes[:'fgColor']
      end

      if attributes.has_key?(:'stop')
        self.stop = attributes[:'stop']
      end

      if attributes.has_key?(:'booking')
        self.booking = attributes[:'booking']
      end

      if attributes.has_key?(:'JourneyDetailRef')
        self.journey_detail_ref = attributes[:'JourneyDetailRef']
      end

      if attributes.has_key?(:'origin')
        self.origin = attributes[:'origin']
      end

      if attributes.has_key?(:'track')
        self.track = attributes[:'track']
      end

      if attributes.has_key?(:'rtTrack')
        self.rt_track = attributes[:'rtTrack']
      end

      if attributes.has_key?(:'sname')
        self.sname = attributes[:'sname']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.has_key?(:'bgColor')
        self.bg_color = attributes[:'bgColor']
      end

      if attributes.has_key?(:'stroke')
        self.stroke = attributes[:'stroke']
      end

      if attributes.has_key?(:'rtDate')
        self.rt_date = attributes[:'rtDate']
      end

      if attributes.has_key?(:'time')
        self.time = attributes[:'time']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'rtTime')
        self.rt_time = attributes[:'rtTime']
      end

      if attributes.has_key?(:'night')
        self.night = attributes[:'night']
      end

      if attributes.has_key?(:'stopid')
        self.stopid = attributes[:'stopid']
      end

      if attributes.has_key?(:'journeyid')
        self.journeyid = attributes[:'journeyid']
      end

      if attributes.has_key?(:'accessibility')
        self.accessibility = attributes[:'accessibility']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @fg_color.nil?
        invalid_properties.push('invalid value for "fg_color", fg_color cannot be nil.')
      end

      if @stop.nil?
        invalid_properties.push('invalid value for "stop", stop cannot be nil.')
      end

      if @journey_detail_ref.nil?
        invalid_properties.push('invalid value for "journey_detail_ref", journey_detail_ref cannot be nil.')
      end

      if @origin.nil?
        invalid_properties.push('invalid value for "origin", origin cannot be nil.')
      end

      if @track.nil?
        invalid_properties.push('invalid value for "track", track cannot be nil.')
      end

      if @sname.nil?
        invalid_properties.push('invalid value for "sname", sname cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @date.nil?
        invalid_properties.push('invalid value for "date", date cannot be nil.')
      end

      if @bg_color.nil?
        invalid_properties.push('invalid value for "bg_color", bg_color cannot be nil.')
      end

      if @stroke.nil?
        invalid_properties.push('invalid value for "stroke", stroke cannot be nil.')
      end

      if @rt_date.nil?
        invalid_properties.push('invalid value for "rt_date", rt_date cannot be nil.')
      end

      if @time.nil?
        invalid_properties.push('invalid value for "time", time cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @rt_time.nil?
        invalid_properties.push('invalid value for "rt_time", rt_time cannot be nil.')
      end

      if @stopid.nil?
        invalid_properties.push('invalid value for "stopid", stopid cannot be nil.')
      end

      if @journeyid.nil?
        invalid_properties.push('invalid value for "journeyid", journeyid cannot be nil.')
      end

      if @accessibility.nil?
        invalid_properties.push('invalid value for "accessibility", accessibility cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @fg_color.nil?
      return false if @stop.nil?
      return false if @journey_detail_ref.nil?
      return false if @origin.nil?
      return false if @track.nil?
      return false if @sname.nil?
      return false if @type.nil?
      return false if @date.nil?
      return false if @bg_color.nil?
      return false if @stroke.nil?
      return false if @rt_date.nil?
      return false if @time.nil?
      return false if @name.nil?
      return false if @rt_time.nil?
      return false if @stopid.nil?
      return false if @journeyid.nil?
      return false if @accessibility.nil?
      accessibility_validator = EnumAttributeValidator.new('String', ['wheelChair', 'lowFloor'])
      return false unless accessibility_validator.valid?(@accessibility)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] accessibility Object to be assigned
    def accessibility=(accessibility)
      validator = EnumAttributeValidator.new('String', ['wheelChair', 'lowFloor'])
      unless validator.valid?(accessibility)
        fail ArgumentError, 'invalid value for "accessibility", must be one of #{validator.allowable_values}.'
      end
      @accessibility = accessibility
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          fg_color == o.fg_color &&
          stop == o.stop &&
          booking == o.booking &&
          journey_detail_ref == o.journey_detail_ref &&
          origin == o.origin &&
          track == o.track &&
          rt_track == o.rt_track &&
          sname == o.sname &&
          type == o.type &&
          date == o.date &&
          bg_color == o.bg_color &&
          stroke == o.stroke &&
          rt_date == o.rt_date &&
          time == o.time &&
          name == o.name &&
          rt_time == o.rt_time &&
          night == o.night &&
          stopid == o.stopid &&
          journeyid == o.journeyid &&
          accessibility == o.accessibility
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [fg_color, stop, booking, journey_detail_ref, origin, track, rt_track, sname, type, date, bg_color, stroke, rt_date, time, name, rt_time, night, stopid, journeyid, accessibility].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
