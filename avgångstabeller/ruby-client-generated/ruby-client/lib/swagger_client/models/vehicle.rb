=begin
#Reseplaneraren

#Provides access to VÃ¤sttrafik journey planner

OpenAPI spec version: 1.10.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.28

=end

require 'date'

module SwaggerClient
  class Vehicle
    # Line color of the journey
    attr_accessor :lcolor

    # Product class
    attr_accessor :prod_class

    # Background color of the journey
    attr_accessor :bcolor

    # Direction of the vehicle. This is a value between 0 and 31 which is describing a direction vector
    attr_accessor :direction

    # Journey name
    attr_accessor :name

    # Service GID
    attr_accessor :gid

    # Current delay of the vehicle in minutes, can be negative, zero or positive
    attr_accessor :delay

    # Y coordinate (latitude) of the position in WGS84 * 1000000
    attr_accessor :y

    # X coordinate (longitude) of the position in WGS84 * 1000000
    attr_accessor :x

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'lcolor' => :'lcolor',
        :'prod_class' => :'prodClass',
        :'bcolor' => :'bcolor',
        :'direction' => :'direction',
        :'name' => :'name',
        :'gid' => :'gid',
        :'delay' => :'delay',
        :'y' => :'y',
        :'x' => :'x'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'lcolor' => :'String',
        :'prod_class' => :'String',
        :'bcolor' => :'String',
        :'direction' => :'Integer',
        :'name' => :'String',
        :'gid' => :'String',
        :'delay' => :'Integer',
        :'y' => :'Float',
        :'x' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'lcolor')
        self.lcolor = attributes[:'lcolor']
      end

      if attributes.has_key?(:'prodClass')
        self.prod_class = attributes[:'prodClass']
      end

      if attributes.has_key?(:'bcolor')
        self.bcolor = attributes[:'bcolor']
      end

      if attributes.has_key?(:'direction')
        self.direction = attributes[:'direction']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'gid')
        self.gid = attributes[:'gid']
      end

      if attributes.has_key?(:'delay')
        self.delay = attributes[:'delay']
      end

      if attributes.has_key?(:'y')
        self.y = attributes[:'y']
      end

      if attributes.has_key?(:'x')
        self.x = attributes[:'x']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @lcolor.nil?
        invalid_properties.push('invalid value for "lcolor", lcolor cannot be nil.')
      end

      if @prod_class.nil?
        invalid_properties.push('invalid value for "prod_class", prod_class cannot be nil.')
      end

      if @bcolor.nil?
        invalid_properties.push('invalid value for "bcolor", bcolor cannot be nil.')
      end

      if @direction.nil?
        invalid_properties.push('invalid value for "direction", direction cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @gid.nil?
        invalid_properties.push('invalid value for "gid", gid cannot be nil.')
      end

      if @delay.nil?
        invalid_properties.push('invalid value for "delay", delay cannot be nil.')
      end

      if @y.nil?
        invalid_properties.push('invalid value for "y", y cannot be nil.')
      end

      if @x.nil?
        invalid_properties.push('invalid value for "x", x cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @lcolor.nil?
      return false if @prod_class.nil?
      prod_class_validator = EnumAttributeValidator.new('String', ['VAS', 'LDT', 'REG', 'BUS', 'BOAT', 'TRAM', 'TAXI'])
      return false unless prod_class_validator.valid?(@prod_class)
      return false if @bcolor.nil?
      return false if @direction.nil?
      return false if @name.nil?
      return false if @gid.nil?
      return false if @delay.nil?
      return false if @y.nil?
      return false if @x.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] prod_class Object to be assigned
    def prod_class=(prod_class)
      validator = EnumAttributeValidator.new('String', ['VAS', 'LDT', 'REG', 'BUS', 'BOAT', 'TRAM', 'TAXI'])
      unless validator.valid?(prod_class)
        fail ArgumentError, 'invalid value for "prod_class", must be one of #{validator.allowable_values}.'
      end
      @prod_class = prod_class
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          lcolor == o.lcolor &&
          prod_class == o.prod_class &&
          bcolor == o.bcolor &&
          direction == o.direction &&
          name == o.name &&
          gid == o.gid &&
          delay == o.delay &&
          y == o.y &&
          x == o.x
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [lcolor, prod_class, bcolor, direction, name, gid, delay, y, x].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
